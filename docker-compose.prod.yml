# Sales Commission SaaS - Docker Compose (Production)
# Optimized production deployment

version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: sales-commission-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sales_commission_saas_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sales_commission_saas_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sales-commission-prod-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: sales-commission-backend-prod
    restart: always
    depends_on:
      database:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-sales_commission_saas_db}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3002
      NODE_ENV: production
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "3002:3002"
    volumes:
      - backend_logs_prod:/app/logs
    networks:
      - sales-commission-prod-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: sales-commission-frontend-prod
    restart: always
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - sales-commission-prod-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sales-commission-nginx
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - sales-commission-prod-network

volumes:
  postgres_data_prod:
    driver: local
  backend_logs_prod:
    driver: local

networks:
  sales-commission-prod-network:
    driver: bridge