generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model companies {
  id                      String             @id @default(cuid())
  name                    String
  domain                  String?            @unique
  subscription            String             @default("trial")
  fiscal_year_start       Int                @default(1)
  default_commission_rate Decimal            @default(0.0500) @db.Decimal(5, 4)
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  ai_insights             Json?
  forecasting_model       String?
  activity_log            activity_log[]
  crm_integrations        crm_integrations[]
  deals                   deals[]
  forecasts               forecasts[]
  targets                 targets[]
  teams                   teams[]
  users                   users[]
  commissions             commissions[]
  commission_rules        commission_rules[]
}

model users {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  password             String
  first_name           String
  last_name            String
  role                 String                 @default("sales_rep")
  is_admin             Boolean                @default(false)
  is_active            Boolean                @default(true)
  hire_date            DateTime?
  territory            String?
  manager_id           String?
  employee_id          String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  performance_profile  Json?
  prediction_accuracy  Decimal?               @db.Decimal(5, 2)
  company_id           String
  is_manager           Boolean                @default(false)
  last_activity        DateTime?
  password_reset_token String?
  password_reset_expires DateTime?
  two_factor_enabled   Boolean                @default(false)
  two_factor_secret    String?
  activity_log         activity_log[]
  deal_categorizations deal_categorizations[]
  deals                deals[]
  forecasts            forecasts[]
  targets              targets[]
  added_team_members   team_members[]         @relation("TeamMemberAdder")
  team_memberships     team_members[]
  created_teams        teams[]                @relation("TeamCreator")
  led_teams            teams[]                @relation("TeamLead")
  company              companies              @relation(fields: [company_id], references: [id])
  manager              users?                 @relation("UserManager", fields: [manager_id], references: [id])
  reports              users[]                @relation("UserManager")
  commissions          commissions[]          @relation("UserCommissions")
  calculated_commissions commissions[]        @relation("CalculatedByUser")
  reviewed_commissions commissions[]          @relation("ReviewedByUser")
  approved_commissions commissions[]          @relation("ApprovedByUser")
  commission_approvals commission_approvals[]
  refresh_tokens       refresh_tokens[]

  @@index([company_id])
  @@index([manager_id])
  @@index([role])
}

model deals {
  id                   String                 @id @default(cuid())
  deal_name            String
  account_name         String
  amount               Decimal                @db.Decimal(12, 2)
  probability          Int                    @default(0)
  status               String                 @default("open")
  stage                String?
  close_date           DateTime
  closed_date          DateTime?
  created_date         DateTime
  crm_id               String?
  crm_type             String                 @default("manual")
  crm_url              String?
  last_sync            DateTime?
  ai_probability       Int?
  ai_close_date        DateTime?
  ai_insights          Json?
  similar_deals        Json?
  deal_age_days        Int?
  stage_history        Json?
  amount_changes       Json?
  projected_commission Decimal?               @default(0) @db.Decimal(12, 2)
  actual_commission    Decimal?               @default(0) @db.Decimal(12, 2)
  commission_amount    Decimal?               @db.Decimal(12, 2)
  commission_rate      Decimal?               @db.Decimal(5, 4)
  commission_calculated_at DateTime?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  user_id              String
  company_id           String
  deal_categorizations deal_categorizations[]
  company              companies              @relation(fields: [company_id], references: [id])
  user                 users                  @relation(fields: [user_id], references: [id])
  commission           commissions?

  @@unique([crm_id, company_id], name: "unique_crm_deal_per_company")
  @@index([user_id])
  @@index([company_id])
  @@index([status])
  @@index([close_date])
  @@index([crm_id])
  @@index([amount])
  @@index([probability])
  @@index([projected_commission])
  @@index([actual_commission])
  @@index([user_id, status, close_date])
  @@index([company_id, created_at])
  @@index([user_id, crm_type])
  @@index([stage, close_date, commission_amount])
  @@index([stage, commission_calculated_at])
}

model deal_categorizations {
  id              String    @id @default(cuid())
  category        String
  confidence_note String?
  created_at      DateTime  @default(now())
  actual_outcome  String?
  outcome_date    DateTime?
  deal_id         String
  user_id         String
  deal            deals     @relation(fields: [deal_id], references: [id])
  user            users     @relation(fields: [user_id], references: [id])

  @@index([deal_id])
  @@index([user_id])
  @@index([category])
  @@index([created_at])
}

model targets {
  id                          String        @id @default(cuid())
  period_type                 String
  period_start                DateTime
  period_end                  DateTime
  quota_amount                Decimal       @db.Decimal(12, 2)
  commission_rate             Decimal       @db.Decimal(5, 4)
  commission_payment_schedule String        @default("monthly")
  is_active                   Boolean       @default(true)
  role                        String?
  team_id                     String?
  team_target                 Boolean       @default(false)
  distribution_method         String?
  distribution_config         Json?
  parent_target_id            String?
  ai_forecast_amount          Decimal?      @db.Decimal(12, 2)
  ai_confidence               Decimal?      @db.Decimal(5, 2)
  ai_updated_at               DateTime?
  created_at                  DateTime      @default(now())
  updated_at                  DateTime      @updatedAt
  user_id                     String
  company_id                  String
  forecasts                   forecasts[]
  company                     companies     @relation(fields: [company_id], references: [id])
  team                        teams?        @relation(fields: [team_id], references: [id])
  user                        users         @relation(fields: [user_id], references: [id])
  commissions                 commissions[]

  @@index([user_id])
  @@index([period_start, period_end])
  @@index([period_type])
  @@index([team_target])
  @@index([team_id])
  @@index([user_id, period_start, period_end])
  @@index([company_id, is_active])
}


model forecasts {
  id                 String    @id @default(cuid())
  forecast_date      DateTime  @default(now())
  forecast_type      String
  pipeline_amount    Decimal   @default(0) @db.Decimal(12, 2)
  commit_amount      Decimal   @default(0) @db.Decimal(12, 2)
  best_case_amount   Decimal   @default(0) @db.Decimal(12, 2)
  closed_amount      Decimal   @default(0) @db.Decimal(12, 2)
  ai_predicted_close Decimal   @default(0) @db.Decimal(12, 2)
  ai_confidence      Decimal   @default(0) @db.Decimal(5, 2)
  actual_closed      Decimal?  @db.Decimal(12, 2)
  forecast_accuracy  Decimal?  @db.Decimal(5, 2)
  created_at         DateTime  @default(now())
  user_id            String
  company_id         String
  target_id          String
  company            companies @relation(fields: [company_id], references: [id])
  target             targets   @relation(fields: [target_id], references: [id])
  user               users     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([forecast_date])
  @@index([forecast_type])
  @@index([target_id])
}

model webhook_events {
  id           String   @id @default(cuid())
  event_id     String   @unique
  processed_at DateTime @default(now())
  expires_at   DateTime // Auto-cleanup after 30 days
  
  @@index([expires_at])
}

model crm_integrations {
  id                    String    @id @default(cuid())
  crm_type              String
  access_token          String?
  refresh_token         String?
  instance_url          String?
  is_active             Boolean   @default(true)
  last_sync             DateTime?
  sync_frequency        String    @default("daily")
  spreadsheet_id        String?
  sheet_name            String?
  header_row            Int       @default(1)
  data_start_row        Int       @default(2)
  column_mapping        Json?
  sync_config           Json?
  ai_enabled            Boolean   @default(false)
  ai_model_version      String?
  total_deals_synced    Int       @default(0)
  last_sync_deals_count Int       @default(0)
  last_sync_created     Int       @default(0)
  last_sync_updated     Int       @default(0)
  sync_errors           Json?
  last_modified_sync    DateTime? // Track last modified date for incremental sync
  sync_cursor           String?   // Pagination cursor for resuming large syncs
  sync_status           String    @default("idle") // idle, syncing, error
  last_error_message    String?   // Last error message for debugging
  error_count           Int       @default(0) // Error count for monitoring
  property_mappings     Json?     // Custom property mappings
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  company_id            String
  company               companies @relation(fields: [company_id], references: [id])

  @@index([company_id])
  @@index([crm_type])
}

model activity_log {
  id               String    @id @default(cuid())
  action           String
  entity_type      String
  entity_id        String
  before_state     Json?
  after_state      Json?
  context          Json?
  response_time_ms Int?
  success          Boolean   @default(true)
  error_message    String?
  created_at       DateTime  @default(now())
  user_id          String
  company_id       String
  company          companies @relation(fields: [company_id], references: [id])
  user             users     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([company_id])
  @@index([created_at])
  @@index([action])
  @@index([entity_type, entity_id])
}

model teams {
  id                  String         @id @default(cuid())
  team_name           String
  description         String?
  default_role        String?
  default_sub_role    String?
  is_active           Boolean        @default(true)
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  company_id          String
  team_lead_id        String?
  created_by_admin_id String
  targets             targets[]
  team_members        team_members[]
  company             companies      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  created_by_admin    users          @relation("TeamCreator", fields: [created_by_admin_id], references: [id])
  team_lead           users?         @relation("TeamLead", fields: [team_lead_id], references: [id])

  @@unique([company_id, team_name])
  @@index([company_id])
  @@index([team_lead_id])
  @@index([is_active])
}

model team_members {
  id                String   @id @default(cuid())
  role_override     String?
  sub_role_override String?
  joined_date       DateTime @default(now())
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  team_id           String
  user_id           String
  added_by_admin_id String
  added_by_admin    users    @relation("TeamMemberAdder", fields: [added_by_admin_id], references: [id])
  team              teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user              users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, team_id])
  @@index([team_id])
  @@index([user_id])
  @@index([is_active])
}

model commissions {
  id                    String                 @id @default(cuid())
  deal_id              String                 @unique
  user_id              String
  company_id           String
  
  // Snapshot data at time of calculation
  deal_amount          Decimal                @db.Decimal(12, 2)
  commission_rate      Decimal                @db.Decimal(5, 4)
  commission_amount    Decimal                @db.Decimal(12, 2)
  target_id            String?
  target_name          String?
  period_start         DateTime
  period_end           DateTime
  
  // Workflow fields
  status               String                 @default("calculated") // calculated, pending_review, approved, rejected, paid
  calculated_at        DateTime               @default(now())
  calculated_by        String?
  reviewed_at          DateTime?
  reviewed_by          String?
  approved_at          DateTime?
  approved_by          String?
  paid_at              DateTime?
  payment_reference    String?
  
  // Audit fields
  notes                String?
  rejection_reason     String?
  adjustment_amount    Decimal?               @db.Decimal(12, 2)
  adjustment_reason    String?
  original_amount      Decimal?               @db.Decimal(12, 2)
  adjusted_by          String?
  adjusted_at          DateTime?
  
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relations
  deal                 deals                  @relation(fields: [deal_id], references: [id])
  user                 users                  @relation("UserCommissions", fields: [user_id], references: [id])
  company              companies              @relation(fields: [company_id], references: [id])
  target               targets?               @relation(fields: [target_id], references: [id])
  calculated_by_user   users?                 @relation("CalculatedByUser", fields: [calculated_by], references: [id])
  reviewed_by_user     users?                 @relation("ReviewedByUser", fields: [reviewed_by], references: [id])
  approved_by_user     users?                 @relation("ApprovedByUser", fields: [approved_by], references: [id])
  approvals            commission_approvals[]
  
  @@index([user_id])
  @@index([company_id])
  @@index([status])
  @@index([period_start, period_end])
  @@index([calculated_at])
  @@index([approved_at])
  @@index([deal_id])
}

model commission_approvals {
  id               String      @id @default(cuid())
  commission_id    String
  action           String      // review, approve, reject, adjust, request_change
  performed_by     String
  performed_at     DateTime    @default(now())
  notes            String?
  previous_status  String
  new_status       String
  metadata         Json?       // Store any additional context
  
  // Relations
  commission       commissions @relation(fields: [commission_id], references: [id])
  performed_by_user users      @relation(fields: [performed_by], references: [id])
  
  @@index([commission_id])
  @@index([performed_by])
  @@index([performed_at])
}

model commission_rules {
  id                String    @id @default(cuid())
  company_id        String
  name              String
  description       String?
  rule_type         String    // base_rate, tier, bonus, spiff, accelerator, override, clawback
  priority          Int       @default(100)
  
  // Flexible configuration
  config            Json      // Store rule-specific configuration
  conditions        Json?     // When does this rule apply?
  
  // Modular calculation
  calculation_type  String    // percentage, fixed, cumulative, graduated
  calculation_config Json     // Parameters for calculation
  
  // Temporal
  effective_from    DateTime
  effective_to      DateTime?
  is_active        Boolean   @default(true)
  
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // Relations
  company           companies @relation(fields: [company_id], references: [id])
  tiers             commission_tiers[]
  
  @@index([company_id])
  @@index([rule_type])
  @@index([is_active])
  @@index([effective_from, effective_to])
}

model commission_tiers {
  id               String           @id @default(cuid())
  rule_id          String
  tier_number      Int
  threshold_min    Decimal          @db.Decimal(12, 2)
  threshold_max    Decimal?         @db.Decimal(12, 2)
  rate            Decimal          @db.Decimal(5, 4)
  type            String           @default("graduated") // graduated, cliff, cumulative
  
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  
  // Relations
  rule             commission_rules @relation(fields: [rule_id], references: [id], onDelete: Cascade)
  
  @@unique([rule_id, tier_number])
  @@index([rule_id])
}

model refresh_tokens {
  id         String    @id @default(cuid())
  token_id   String    @unique
  user_id    String
  expires_at DateTime
  created_at DateTime  @default(now())
  revoked    Boolean   @default(false)
  revoked_at DateTime?
  user_agent String?
  ip_address String?
  
  // Relations
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  @@index([expires_at])
  @@index([revoked])
}
